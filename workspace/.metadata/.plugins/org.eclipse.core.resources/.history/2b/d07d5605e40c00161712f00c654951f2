package hw3;

/**
 * Scoring category that is satisfied by any hand.
 * The score is the sum of all die values.
 */
public class Chance implements hw3.api.Category
{
  private String name;
  
  private Hand hand;
  
  private int score;
  
  private boolean filled;
	
  /**
   * Constructs a Chance category with the given display name.
   * @param displayName
   *   name for this category
   */
  public Chance(String displayName)
  {
    // TODO
	name = displayName;
	filled = false;
	score = 0;
  }

  /**
   * Determines whether this category is filled.
   * @return
   *   true if this category has a fixed hand and score, 
   *   false otherwise
   */
  public boolean isFilled() {
	  return filled;
  }
  
  /**
   * Returns the score for this category, or zero if the 
   * category is not <em>filled</em>.
   * @return
   *   score for the category or zero if not filled
   */
  public int getScore() {
	  return score;
  }

  /**
   * Returns the hand that was used to fill this category, or null if
   * not <em>filled</em>.  
   * @return
   *   hand filling this category, or null if not filled
   */
  public Hand getHand() {
	  return hand;
  }
  
  /**
   * Returns the name for this category.
   * @return
   *   name for this category
   */
  public String getDisplayName() {
	  return name;
  }
  
  /**
   * Permanently sets the hand being used to fill
   * this category.  The score is set to the value of
   * <code>getPotentialScore</code> for the given hand.
   * Throws <code>IllegalStateException</code> if 
   * the category has already been filled or if the
   * given hand is not <em>complete</em> (as defined
   * by the <code>Hand.isComplete</code> method).
   * @param dice
   *   hand to be used to satisfy this category
   * @throws IllegalStateException
   *   if the given hand is not <em>complete</em> (according
   *   to the <code>isComplete()</code> method of Hand) or
   *   if this category is already filled
   */
  public void fill(Hand dice) {
	  if(isFilled() || !dice.isComplete())
	  {
		throw new IllegalStateException();
	  }
	  
	  hand = dice;
	  getPotentialScore(hand);
  }
  
  /**
   * Determines whether the given hand satisfies the defined
   * criteria for this scoring category. The criteria are determined
   * by the concrete type implementing the interface.
   * This method does not modify the state of this category.
   * @param dice
   *   hand to check
   * @return
   *   true if the given hand satisfies the defined criteria for the
   *   category, false otherwise
   */
  public boolean isSatisfiedBy(Hand dice) {
	  return true;
  }
  
  /**
   * Returns the potential score that would result from 
   * using the given hand to fill this category.
   * Always returns zero if the <code>isSatisfiedBy()</code> 
   * method returns false for the given hand.
   * This method does not modify the state of this category.
   * @param dice
   *   hand to check
   * @return
   *   potential score for the given hand
   */
  public int getPotentialScore(Hand dice) {
	  int[] vals = dice.getAll();
	  
  }
}
